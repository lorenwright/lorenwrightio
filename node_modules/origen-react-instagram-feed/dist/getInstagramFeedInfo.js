"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _axios = _interopRequireDefault(require("axios"));

var _get = _interopRequireDefault(require("lodash/get"));

var _slice = _interopRequireDefault(require("lodash/slice"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/**
 * This function returns a promise that when resolves return data extracted from the public profile page of an instagram account.
 */
function getInstagramFeedInfo(_x) {
  return _getInstagramFeedInfo.apply(this, arguments);
}

function _getInstagramFeedInfo() {
  _getInstagramFeedInfo = _asyncToGenerator(function* (account, options = {
    numberOfMediaElements: 12,
    discardVideos: false
  }) {
    let media = [];
    let accountInfo = {};

    try {
      const userInfoSource = yield _axios.default.get(`https://www.instagram.com/${account}/`); // userInfoSource.data contains the HTML from Axios

      const jsonObject = userInfoSource.data.match(/<script type="text\/javascript">window\._sharedData = (.*)<\/script>/)[1].slice(0, -1);
      accountInfo = (0, _get.default)(JSON.parse(jsonObject), 'entry_data.ProfilePage[0].graphql.user'); // Retrieve media info

      const mediaArray = (0, _slice.default)(accountInfo.edge_owner_to_timeline_media.edges, 0, options.numberOfMediaElements);
      media = mediaArray.reduce((result, {
        node
      }) => {
        // Process only if is an image
        if (options.discardVideos && // eslint-disable-next-line no-underscore-dangle
        node.__typename && // eslint-disable-next-line no-underscore-dangle
        node.__typename !== 'GraphImage') {
          return result;
        } // Return node


        result.push({
          id: (0, _get.default)(node, 'id'),
          displayImage: (0, _get.default)(node, 'display_url'),
          thumbnail: (0, _get.default)(node, 'thumbnail_src'),
          likes: (0, _get.default)(node, 'edge_liked_by.count'),
          caption: (0, _get.default)(node, 'edge_media_to_caption.edges[0].node.text'),
          commentsNumber: (0, _get.default)(node, 'edge_media_to_comment.count'),
          accessibilityCaption: (0, _get.default)(node, 'accessibility_caption'),
          dimensions: (0, _get.default)(node, 'dimensions'),
          postLink: `https://www.instagram.com/p/${(0, _get.default)(node, 'shortcode')}/`
        });
        return result;
      }, media);
    } catch (e) {
      throw new Error(`Unable to retrieve info. Reason: ${e.toString()}`);
    }

    return {
      accountInfo,
      accountFollowedBy: (0, _get.default)(accountInfo, 'edge_followed_by.count'),
      accountFollow: (0, _get.default)(accountInfo, 'edge_follow.count'),
      postsCount: (0, _get.default)(accountInfo, 'edge_owner_to_timeline_media.count'),
      profilePic: (0, _get.default)(accountInfo, 'profile_pic_url_hd'),
      accountName: (0, _get.default)(accountInfo, 'username'),
      media
    };
  });
  return _getInstagramFeedInfo.apply(this, arguments);
}

var _default = getInstagramFeedInfo;
exports.default = _default;