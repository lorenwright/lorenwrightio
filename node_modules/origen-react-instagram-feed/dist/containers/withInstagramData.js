"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _compose = _interopRequireDefault(require("recompose/compose"));

var _withStateHandlers = _interopRequireDefault(require("recompose/withStateHandlers"));

var _lifecycle = _interopRequireDefault(require("recompose/lifecycle"));

var _getInstagramFeedInfo = _interopRequireDefault(require("../getInstagramFeedInfo"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * This is a HoC that injects instagram data as props. See supported props below:
 * @param {string} account account from where to get data from.
 * @param {number} [numberOfMediaElements=12] number of media elements to get. Max 12.
 * @param {boolean} [discardVideos=false] discard videos from media elements.
 * @returns injects the data from `getInstagramFeedInfo` to the props of the wrapped component.
 */
const withInstagramData = (0, _compose.default)((0, _withStateHandlers.default)({
  status: 'loading'
}, {
  updateStatus: () => newStatus => ({
    status: newStatus
  })
}), (0, _lifecycle.default)({
  componentDidMount() {
    const _this$props = this.props,
          account = _this$props.account,
          numberOfMediaElements = _this$props.numberOfMediaElements,
          discardVideos = _this$props.discardVideos,
          updateStatus = _this$props.updateStatus;
    (0, _getInstagramFeedInfo.default)(account, {
      numberOfMediaElements,
      discardVideos
    }).then(result => {
      // Will send this state as props to the component
      this.setState(_objectSpread({}, result));
      updateStatus('completed');
    }).catch(() => {
      updateStatus('failed');
    });
  }

}));
var _default = withInstagramData;
exports.default = _default;